!!****if* source/Driver/DriverMain/Driver_sourceTerms
!!
!! NAME
!!
!!  Driver_sourceTerms
!!
!! SYNOPSIS
!!
!!  Driver_sourceTerms(integer(IN)::blockCount,
!!                     integer(IN)::blockList(blockCount),
!!                     real(IN) :: dt)
!!
!! DESCRIPTION
!!
!!  Driver for source terms. Instead of calling all these routines 
!!  from Driver_evolveFlash we call Driver_sourceTerms which then
!!  makes the calls to Cool, Burn, Heat and Stir.  If a unit is not
!!  included in the simulation, the routine will be a stub and return
!!  without doing anything.
!! 
!!
!! ARGUMENTS
!!  blockCount   : The number of blocks in the list
!!  blockList    : The list of blocks on which to apply the stirring operator
!!  dt           : the current timestep
!!
!!***



subroutine Driver_sourceTerms(blockCount, blockList, dt) 

  use Driver_data, ONLY: dr_simTime
  use Flame_interface, ONLY : Flame_step
  use Stir_interface, ONLY : Stir
  use Heat_interface, ONLY : Heat
  use Burn_interface, ONLY : Burn
  use Cool_interface, ONLY : Cool
  use Simulation_data, ONLY: sim_smallX, sim_table, sim_tableRows, sim_tableCols, sim_tNozz
  use Grid_interface, ONLY : Grid_getBlkIndexLimits, Grid_getBlkPtr, Grid_releaseBlkPtr,&
    Grid_getCellCoords, Grid_putPointData, Grid_getMinCellSize
  use Eos_interface, ONLY : Eos_wrapped, Eos
  use gr_mpoleData, ONLY: Xcm, Ycm, Zcm, Mtot
  use PhysicalConstants_interface, ONLY : PhysicalConstants_get
  use RuntimeParameters_interface, ONLY : RuntimeParameters_mapStrToInt, RuntimeParameters_get
  use Gravity_data, ONLY: grv_ptmass
  implicit none
#include "Eos.h"
#include "constants.h"
#include "Flash.h"

  integer, parameter :: ngp = 10000
  real, intent(IN)    :: dt
  integer, intent(IN) :: blockCount
  integer, dimension(blockCount), intent(IN):: blockList
  
  integer  ::  i, j, k, l, put, lb
  real     ::  xx, yy, zz, local_cell_size, min_cell_size, c2, rnozz, cell_dens
  real     ::  xnozz, ynozz, znozz, nnozz, G, falling_time
  real     ::  t, rho_amb, new_mass, ind_frac
  integer  ::  istat

  real,allocatable,dimension(:) :: xCoord,yCoord,zCoord
  integer,dimension(2,MDIM) :: blkLimits,blkLimitsGC
  integer :: sizeX,sizeY,sizeZ
  real, dimension(SPECIES_BEGIN:SPECIES_END) :: xn
  real, dimension(:,:,:,:),pointer :: solnData
  real, dimension(EOS_NUM) :: eosData
  integer,dimension(MDIM) :: axis

  logical :: gcell = .true.
  logical :: changedGrid

  !nozzle variables
  integer cnt,ri
  real :: rho(0:ngp),dr,delt,yzdist
  real :: m_nozz_tot,r(0:ngp),rho0_cgs,massacc,mrate,mrate_adj
  real :: rhoi, grv_ptxpos, grv_ptypos, grv_ptzpos, xs, ys, zs
  
  real :: cfactor = 0.8 !Kinetic energy reduction per second
  real :: ke, donor_mass
  
  !do lb = 1, blockCount
  !    call Grid_getBlkIndexLimits(blockList(lb),blkLimits,blkLimitsGC)
  !    sizeX = blkLimitsGC(HIGH,IAXIS) - blkLimitsGC(LOW,IAXIS) + 1
  !    allocate(xCoord(sizeX),stat=istat)
  !    sizeY = blkLimitsGC(HIGH,JAXIS) - blkLimitsGC(LOW,JAXIS) + 1
  !    allocate(yCoord(sizeY),stat=istat)
  !    sizeZ = blkLimitsGC(HIGH,KAXIS) - blkLimitsGC(LOW,KAXIS) + 1
  !    allocate(zCoord(sizeZ),stat=istat)
  !    cellsize = xCoord(2) - xCoord(1) 

  !    if (NDIM == 3) call Grid_getCellCoords&
  !                        (KAXIS, blockList(lb), CENTER, gcell, zCoord, sizeZ)
  !    if (NDIM >= 2) call Grid_getCellCoords&
  !                        (JAXIS, blockList(lb), CENTER,gcell, yCoord, sizeY)
  !    call Grid_getCellCoords(IAXIS, blockList(lb), CENTER, gcell, xCoord, sizeX)
  !    call Grid_getBlkPtr(blockList(lb),solnData)
  !    do k = blkLimitsGC(LOW,KAXIS), blkLimitsGC(HIGH,KAXIS)
  !       zz = zCoord(k)
  !       do j = blkLimitsGC(LOW, JAXIS), blkLimitsGC(HIGH, JAXIS)
  !          yy = yCoord(j)
  !          do i = blkLimitsGC(LOW,IAXIS), blkLimitsGC(HIGH, IAXIS)
  !             xx = xCoord(i)
  !             t = 5.0e5
  !             
  !             !axis(IAXIS)=i
  !             !axis(JAXIS)=j
  !             !axis(KAXIS)=k
  !             !call Grid_putPointData(blockList(lb), CENTER, TEMP_VAR, EXTERIOR, axis, t)    
  !             solnData(TEMP_VAR,i,j,k)=t
  !          enddo
  !       enddo
  !    enddo
  !    call Grid_releaseBlkPtr(blockList(lb), solnData)
  !    deallocate(xCoord)
  !    deallocate(yCoord)
  !    deallocate(zCoord)
  !enddo

  if (dr_simTime .lt. sim_tNozz) then
      do lb = 1, blockCount
          call Grid_getBlkIndexLimits(blockList(lb),blkLimits,blkLimitsGC)
          call Grid_getBlkPtr(blockList(lb),solnData)
          do k = blkLimitsGC(LOW, KAXIS), blkLimitsGC(HIGH, KAXIS)
              do j = blkLimitsGC(LOW, JAXIS), blkLimitsGC(HIGH, JAXIS)
                  do i = blkLimitsGC(LOW, IAXIS), blkLimitsGC(HIGH, IAXIS)
                      if (solnData(DENS_VAR,i,j,k) .lt. 1.0e2) cycle
                      solnData(TEMP_VAR,i,j,k) = 5.0d5

                      !ke = 0.5 * (solnData(VELX_VAR,i,j,k)**2. + solnData(VELY_VAR,i,j,k)**2. + solnData(VELZ_VAR,i,j,k)**2.)
                      !solnData(EINT_VAR,i,j,k) = solnData(EINT_VAR,i,j,k) + (1 - cfactor) * ke
                      solnData(VELX_VAR,i,j,k) = solnData(VELX_VAR,i,j,k)*sqrt(dt*cfactor)
                      solnData(VELY_VAR,i,j,k) = solnData(VELY_VAR,i,j,k)*sqrt(dt*cfactor)
                      solnData(VELZ_VAR,i,j,k) = solnData(VELZ_VAR,i,j,k)*sqrt(dt*cfactor)
                  enddo
              enddo
          enddo
          call Grid_releaseBlkPtr(blockList(lb), solnData)
          call Eos_wrapped(MODE_DENS_TEMP,blkLimitsGC,blockList(lb))
      enddo
  else
      call RuntimeParameters_get('sim_rhoAmbient',rho_amb)
      call PhysicalConstants_get('Newton',G)
      call Grid_getMinCellSize(min_cell_size)
      xn = sim_smallX
      xn(HE4_SPEC) = 1.0
      donor_mass = grv_ptmass

      do i = 1, sim_TableRows-1
          donor_mass = donor_mass - (sim_table(i,12)+sim_table(i+1,12))/2.*(sim_table(i+1,1)-sim_table(i,1))
          if ((dr_simTime - sim_tNozz) .le. sim_table(i+1,1)) then
              ind_frac = (dr_simTime - sim_tNozz - sim_table(i,1))/(sim_table(i+1,1) - sim_table(i,1))
              mrate = 2.*(sim_table(i,12) + (sim_table(i+1,12) - sim_table(i,12)) * ind_frac) !Half will fall onto the donor
              xs = (sim_table(i,6) + (sim_table(i+1,6) - sim_table(i,6))*ind_frac)
              ys = (sim_table(i,7) + (sim_table(i+1,7) - sim_table(i,7))*ind_frac)
              zs = (sim_table(i,8) + (sim_table(i+1,8) - sim_table(i,8))*ind_frac)
              !xnozz = Xcm - xs + sim_table(1,9)
              !ynozz = Ycm - ys + sim_table(1,10)
              !znozz = Zcm - zs + sim_table(1,11)
              xnozz = Xcm - xs + (sim_table(i,9) + (sim_table(i+1,9) - sim_table(i,9))*ind_frac)
              ynozz = Ycm - ys + (sim_table(i,10) + (sim_table(i+1,10) - sim_table(i,10))*ind_frac)
              znozz = Zcm - zs + (sim_table(i,11) + (sim_table(i+1,11) - sim_table(i,11))*ind_frac)
              grv_ptxpos = Xcm - xs + (sim_table(i,3) + (sim_table(i+1,3) - sim_table(i,3))*ind_frac)
              grv_ptypos = Ycm - ys + (sim_table(i,4) + (sim_table(i+1,4) - sim_table(i,4))*ind_frac)
              grv_ptzpos = Zcm - zs + (sim_table(i,5) + (sim_table(i+1,5) - sim_table(i,5))*ind_frac)
              exit
          endif
      enddo

      !nozzle temperature
      t = 5.0d5

      !how precise do we want the mass?
      massacc = 1.d-5

      !the following makes the profile shape independent of time-step size
      falling_time = sqrt(2*((Xcm - xnozz)**2. + (Ycm - ynozz)**2. + (Zcm - znozz)**2.)*min_cell_size/G/Mtot)
      !include donor when calculating falling time
      !falling_time = sqrt(2*min_cell_size/G/abs(Mtot/(((Xcm-xnozz)**2.+(Ycm-ynozz)**2.+(Zcm-znozz)**2.)-min_cell_size)-&
      !    donor_mass/(((grv_ptxpos-xnozz)**2.+(grv_ptypos-ynozz)**2.+(grv_ptzpos-znozz)**2.)+min_cell_size)))
      mrate_adj = mrate * falling_time

      !guess central density (cgs) 
      call guess_rho_0(mrate_adj,rho0_cgs)
      !print *, 'rho0_cgs', rho0_cgs

      !loop until mass is correct
      call intout(xn,rho0_cgs,t,m_nozz_tot,donor_mass,cnt,r,rho,xnozz,ynozz,znozz,grv_ptxpos,grv_ptypos,grv_ptzpos)
      i = 0
      do while (abs(m_nozz_tot-mrate)/mrate.gt.massacc)
          rho0_cgs = rho0_cgs * 10**((log10(mrate)-log10(m_nozz_tot))/2.)
          !print *, 'rho0_cgs', rho0_cgs
          call intout(xn,rho0_cgs,t,m_nozz_tot,donor_mass,cnt,r,rho,xnozz,ynozz,znozz,grv_ptxpos,grv_ptypos,grv_ptzpos)
          if (i .gt. 100) then
              print *, 'nozzle mass did not converge!'
              stop
          endif
          i = i + 1
      enddo

      !adjust rho so that mass is added proportional to time-step size
      rho = rho*dt/falling_time

      !radius of nozzle
      rnozz = r(cnt)
      delt = rnozz/dble(cnt)

      do lb = 1, blockCount
          changedGrid = .false.
          call Grid_getBlkIndexLimits(blockList(lb),blkLimits,blkLimitsGC)
          sizeX = blkLimitsGC(HIGH,IAXIS) - blkLimitsGC(LOW,IAXIS) + 1
          allocate(xCoord(sizeX),stat=istat)
          sizeY = blkLimitsGC(HIGH,JAXIS) - blkLimitsGC(LOW,JAXIS) + 1
          allocate(yCoord(sizeY),stat=istat)
          sizeZ = blkLimitsGC(HIGH,KAXIS) - blkLimitsGC(LOW,KAXIS) + 1
          allocate(zCoord(sizeZ),stat=istat)

          if (NDIM == 3) call Grid_getCellCoords&
                              (KAXIS, blockList(lb), CENTER, gcell, zCoord, sizeZ)
          if (NDIM >= 2) call Grid_getCellCoords&
                              (JAXIS, blockList(lb), CENTER,gcell, yCoord, sizeY)
          call Grid_getCellCoords(IAXIS, blockList(lb), CENTER, gcell, xCoord, sizeX)
          local_cell_size = abs(xCoord(2) - xCoord(1))
          c2 = local_cell_size/2.

          if ((xnozz .lt. xCoord(1) - c2) .or. (xnozz .gt. xCoord(sizeX) + c2)) cycle
          if ((yCoord(sizeY) - c2 .lt. ynozz - rnozz) .or. (yCoord(1) + c2 .gt. ynozz + rnozz)) cycle
          if ((zCoord(sizeZ) - c2 .lt. znozz - rnozz) .or. (zCoord(1) + c2 .gt. znozz + rnozz)) cycle

          if ((ynozz .ge. yCoord(1) - rnozz) .and. (ynozz .le. yCoord(sizeY) + rnozz) .and. &
              (znozz .ge. zCoord(1) - rnozz) .and. (znozz .le. zCoord(sizeZ) + rnozz)) then

              call Grid_getBlkPtr(blockList(lb),solnData)
              do k = blkLimitsGC(LOW,KAXIS), blkLimitsGC(HIGH,KAXIS)
                 zz = zCoord(k)
                 if ((zz .lt. znozz - rnozz) .or. (zz .gt. znozz + rnozz)) cycle
                 do j = blkLimitsGC(LOW, JAXIS), blkLimitsGC(HIGH, JAXIS)
                    yy = yCoord(j)
                    if ((yy .lt. ynozz - rnozz) .or. (yy .gt. ynozz + rnozz)) cycle
                    do i = blkLimitsGC(LOW,IAXIS), blkLimitsGC(HIGH, IAXIS)
                       xx = xCoord(i)
                       if ((xx .lt. xnozz - c2) .or. (xx .gt. xnozz + c2)) cycle

                       yzdist = sqrt((yy-ynozz)**2 + (zz-znozz)**2)
                       if (yzdist .le. rnozz) then
                           changedGrid = .true.
                           ri = int(floor(yzdist/delt))
                           dr = yzdist/delt - ri
                           if (ri .ge. cnt - 1) then
                               new_mass = rho(ri) + (rho_amb-rho(ri))*dr
                           else
                               new_mass = rho(ri) + (rho(ri+1)-rho(ri))*dr
                           endif

                           !We want to add mass to the nozzle without destroying the composition of the stuff that's
                           !already there...
                           solnData(SPECIES_BEGIN:SPECIES_END,i,j,k) = &
                               (solnData(DENS_VAR,i,j,k)*solnData(SPECIES_BEGIN:SPECIES_END,i,j,k)+new_mass*xn)/&
                               (solnData(DENS_VAR,i,j,k)+new_mass)
                           do l = 1, NSPECIES
                               solnData(SPECIES_BEGIN+l-1,i,j,k) = min(max(solnData(SPECIES_BEGIN+l-1,i,j,k),sim_smallX),1.0)
                           enddo
                           new_mass = solnData(DENS_VAR,i,j,k)+new_mass
                           !solnData(SPECIES_BEGIN:SPECIES_END,i,j,k) = xn
                           solnData(VELX_VAR,i,j,k) = solnData(DENS_VAR,i,j,k)/new_mass * solnData(VELX_VAR,i,j,k)
                           solnData(VELY_VAR,i,j,k) = solnData(DENS_VAR,i,j,k)/new_mass * solnData(VELY_VAR,i,j,k)
                           solnData(VELZ_VAR,i,j,k) = solnData(DENS_VAR,i,j,k)/new_mass * solnData(VELZ_VAR,i,j,k)
                           solnData(ENER_VAR,i,j,k) = solnData(EINT_VAR,i,j,k) + &
                               0.5*(solnData(VELX_VAR,i,j,k)**2. + solnData(VELY_VAR,i,j,k)**2. + solnData(VELZ_VAR,i,j,k)**2.)
                           solnData(DENS_VAR,i,j,k) = new_mass
                           solnData(TEMP_VAR,i,j,k) = t

                           !solnData(PRES_VAR,i,j,k) = eosData(EOS_PRES)
                           !solnData(EINT_VAR,i,j,k) = eosData(EOS_EINT)
                           !solnData(ENER_VAR,i,j,k) = eosData(EOS_EINT)
                           !solnData(GAMC_VAR,i,j,k) = eosData(EOS_GAMC)
                           !solnData(GAME_VAR,i,j,k) = eosData(EOS_PRES)/(eosData(EOS_EINT)*eosData(EOS_DENS))+1
                       endif
                    enddo
                 enddo
              enddo
              call Grid_releaseBlkPtr(blockList(lb), solnData)
              if (changedGrid) then
                  call Eos_wrapped(MODE_DENS_TEMP,blkLimitsGC,blockList(lb))
              endif
          endif
          deallocate(xCoord)
          deallocate(yCoord)
          deallocate(zCoord)
      enddo
  endif

  call Stir(blockCount, blockList, dt) 
  call Flame_step(blockCount, blockList, dt)
  call Burn(blockCount, blockList, dt) 
  call Heat(blockCount, blockList, dt, dr_simTime) 
  call Cool(blockCount, blockList, dt, dr_simTime) 

  return
end subroutine Driver_sourceTerms
