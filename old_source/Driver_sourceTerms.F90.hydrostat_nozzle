!!****if* source/Driver/DriverMain/Driver_sourceTerms
!!
!! NAME
!!
!!  Driver_sourceTerms
!!
!! SYNOPSIS
!!
!!  Driver_sourceTerms(integer(IN)::blockCount,
!!                     integer(IN)::blockList(blockCount),
!!                     real(IN) :: dt)
!!
!! DESCRIPTION
!!
!!  Driver for source terms. Instead of calling all these routines 
!!  from Driver_evolveFlash we call Driver_sourceTerms which then
!!  makes the calls to Cool, Burn, Heat and Stir.  If a unit is not
!!  included in the simulation, the routine will be a stub and return
!!  without doing anything.
!! 
!!
!! ARGUMENTS
!!  blockCount   : The number of blocks in the list
!!  blockList    : The list of blocks on which to apply the stirring operator
!!  dt           : the current timestep
!!
!!***



subroutine Driver_sourceTerms(blockCount, blockList, dt) 

  use Driver_data, ONLY: dr_simTime
  use Flame_interface, ONLY : Flame_step
  use Stir_interface, ONLY : Stir
  use Heat_interface, ONLY : Heat
  use Burn_interface, ONLY : Burn
  use Cool_interface, ONLY : Cool
  use Simulation_data, ONLY: sim_smallX, sim_table, sim_tableRows, sim_tableCols, sim_tNozz
  use Gravity_data, ONLY: grv_ptxpos
  use Grid_interface, ONLY : Grid_getBlkIndexLimits, Grid_getBlkPtr, Grid_releaseBlkPtr,&
    Grid_getCellCoords, Grid_putPointData, Grid_getMinCellSize
  use Eos_interface, ONLY : Eos_wrapped, Eos
  use gr_mpoleData, ONLY: Xcm, Ycm, Zcm
  use PhysicalConstants_interface, ONLY : PhysicalConstants_get
  use RuntimeParameters_interface, ONLY : RuntimeParameters_mapStrToInt, RuntimeParameters_get
  implicit none
#include "Eos.h"
#include "constants.h"
#include "Flash.h"

  integer, parameter :: ngp = 10000
  real, intent(IN)    :: dt
  integer, intent(IN) :: blockCount
  integer, dimension(blockCount), intent(IN):: blockList
  
  integer  ::  i, j, k, put, lb
  real     ::  xx, yy, zz, local_cell_size, min_cell_size, c2, rnozz, cell_dens
  real     ::  xnozz, ynozz, znozz, sim_tNozz, nnozz
  real     ::  t, rho_amb, new_mass, ind_frac
  integer  ::  istat

  real,allocatable,dimension(:) :: xCoord,yCoord,zCoord
  integer,dimension(2,MDIM) :: blkLimits,blkLimitsGC
  integer :: sizeX,sizeY,sizeZ
  real, dimension(SPECIES_BEGIN:SPECIES_END) :: xn
  real, dimension(:,:,:,:),pointer :: solnData
  real, dimension(EOS_NUM) :: eosData
  integer,dimension(MDIM) :: axis

  logical :: gcell = .true.
  logical :: changedGrid

  !nozzle variables
  integer cnt,ri
  double precision rho(0:ngp),dr,delt,yzdist
  double precision mtot,r(0:ngp),rho0_cgs,massacc,mrate
  double precision rhoi, cfactor = 0.99
  
  !do lb = 1, blockCount
  !    call Grid_getBlkIndexLimits(blockList(lb),blkLimits,blkLimitsGC)
  !    sizeX = blkLimitsGC(HIGH,IAXIS) - blkLimitsGC(LOW,IAXIS) + 1
  !    allocate(xCoord(sizeX),stat=istat)
  !    sizeY = blkLimitsGC(HIGH,JAXIS) - blkLimitsGC(LOW,JAXIS) + 1
  !    allocate(yCoord(sizeY),stat=istat)
  !    sizeZ = blkLimitsGC(HIGH,KAXIS) - blkLimitsGC(LOW,KAXIS) + 1
  !    allocate(zCoord(sizeZ),stat=istat)
  !    cellsize = xCoord(2) - xCoord(1) 

  !    if (NDIM == 3) call Grid_getCellCoords&
  !                        (KAXIS, blockList(lb), CENTER, gcell, zCoord, sizeZ)
  !    if (NDIM >= 2) call Grid_getCellCoords&
  !                        (JAXIS, blockList(lb), CENTER,gcell, yCoord, sizeY)
  !    call Grid_getCellCoords(IAXIS, blockList(lb), CENTER, gcell, xCoord, sizeX)
  !    call Grid_getBlkPtr(blockList(lb),solnData)
  !    do k = blkLimitsGC(LOW,KAXIS), blkLimitsGC(HIGH,KAXIS)
  !       zz = zCoord(k)
  !       do j = blkLimitsGC(LOW, JAXIS), blkLimitsGC(HIGH, JAXIS)
  !          yy = yCoord(j)
  !          do i = blkLimitsGC(LOW,IAXIS), blkLimitsGC(HIGH, IAXIS)
  !             xx = xCoord(i)
  !             t = 5.0e5
  !             
  !             !axis(IAXIS)=i
  !             !axis(JAXIS)=j
  !             !axis(KAXIS)=k
  !             !call Grid_putPointData(blockList(lb), CENTER, TEMP_VAR, EXTERIOR, axis, t)    
  !             solnData(TEMP_VAR,i,j,k)=t
  !          enddo
  !       enddo
  !    enddo
  !    call Grid_releaseBlkPtr(blockList(lb), solnData)
  !    deallocate(xCoord)
  !    deallocate(yCoord)
  !    deallocate(zCoord)
  !enddo

  if (dr_simTime .lt. sim_tNozz) then
      do lb = 1, blockCount
          call Grid_getBlkIndexLimits(blockList(lb),blkLimits,blkLimitsGC)
          call Grid_getBlkPtr(blockList(lb),solnData)
          do k = blkLimitsGC(LOW, KAXIS), blkLimitsGC(HIGH, KAXIS)
              do j = blkLimitsGC(LOW, JAXIS), blkLimitsGC(HIGH, JAXIS)
                  do i = blkLimitsGC(LOW, IAXIS), blkLimitsGC(HIGH, IAXIS)
                      if (solnData(DENS_VAR,i,j,k) .lt. 1.0e2) cycle
                      solnData(EOS_TEMP) = 5.0d5
                      xn = solnData(SPECIES_BEGIN:SPECIES_END,i,j,k)
                      ke = 0.5 * (solnData(VELX_VAR,i,j,k)**2. + solnData(VELY_VAR,i,j,k)**2. + solnData(VELZ_VAR,i,j,k)**2.)
                      solnData(EINT_VAR,i,j,k) = solnData(EINT_VAR,i,j,k) + (1 - cfactor) * ke
                      solnData(VELX_VAR,i,j,k) = solnData(VELX_VAR,i,j,k)*sqrt(cfactor)
                      solnData(VELY_VAR,i,j,k) = solnData(VELY_VAR,i,j,k)*sqrt(cfactor)
                      solnData(VELZ_VAR,i,j,k) = solnData(VELZ_VAR,i,j,k)*sqrt(cfactor)
                  enddo
              enddo
          enddo
          call Grid_releaseBlkPtr(blockList(lb), solnData)
          call Eos_wrapped(MODE_DENS_EI,blkLimitsGC,blockList(lb))
      enddo
  else
      call RuntimeParameters_get('sim_rhoAmbient',rho_amb)
      call Grid_getMinCellSize(min_cell_size)
      xn = sim_smallX
      xn(HE4_SPEC) = 1.0

      do i = 1, sim_TableRows-1
          if ((dr_simTime - sim_tNozz) .ge. sim_table(i,1)) then
              ind_frac = (dr_simTime - sim_tNozz - sim_table(i,1))/(sim_table(i+1,1) - sim_table(i,1))
              mrate = (sim_table(i,12) + (sim_table(i+1,12) - sim_table(i,12)) * ind_frac) * dt
              xnozz = sim_table(i,9) + (sim_table(i+1,9) - sim_table(i,9))*ind_frac
              ynozz = sim_table(i,10) + (sim_table(i+1,10) + sim_table(i,10))*ind_frac
              znozz = sim_table(i,11) + (sim_table(i+1,11) + sim_table(i,11))*ind_frac
              !print *, mrate, xnozz, ynozz
              exit
          endif
      enddo

      do lb = 1, blockCount
          changedGrid = .false.
          call Grid_getBlkIndexLimits(blockList(lb),blkLimits,blkLimitsGC)
          sizeX = blkLimitsGC(HIGH,IAXIS) - blkLimitsGC(LOW,IAXIS) + 1
          allocate(xCoord(sizeX),stat=istat)
          sizeY = blkLimitsGC(HIGH,JAXIS) - blkLimitsGC(LOW,JAXIS) + 1
          allocate(yCoord(sizeY),stat=istat)
          sizeZ = blkLimitsGC(HIGH,KAXIS) - blkLimitsGC(LOW,KAXIS) + 1
          allocate(zCoord(sizeZ),stat=istat)

          if (NDIM == 3) call Grid_getCellCoords&
                              (KAXIS, blockList(lb), CENTER, gcell, zCoord, sizeZ)
          if (NDIM >= 2) call Grid_getCellCoords&
                              (JAXIS, blockList(lb), CENTER,gcell, yCoord, sizeY)
          call Grid_getCellCoords(IAXIS, blockList(lb), CENTER, gcell, xCoord, sizeX)
          local_cell_size = abs(xCoord(2) - xCoord(1))
          c2 = local_cell_size/2.
          if ((xnozz .lt. xCoord(1) - c2) .or. (xnozz .gt. xCoord(sizeX) + c2)) cycle

          !nozzle temperature
          t = 5.0d5

          !how precise do we want the mass?
          massacc = 1.d-5

          !guess central density (cgs) 
          call guess_rho_0(mrate,rho0_cgs)
          print *, 'rho0_cgs', rho0_cgs

          !loop until mass is correct
          call intout(xn,rho0_cgs,t,mtot,cnt,r,rho,xnozz)
          i = 0
          do while (abs(mtot-mrate)/mrate.gt.massacc)
              rho0_cgs = rho0_cgs * 10**((log10(mrate)-log10(mtot))/2.)
              print *, 'rho0_cgs', rho0_cgs
              call intout(xn,rho0_cgs,t,mtot,cnt,r,rho,xnozz)
              if (i .gt. 100) then
                  print *, 'nozzle mass did not converge!'
                  exit
              endif
              i = i + 1
          enddo
          rnozz = r(cnt)
          if ((yCoord(sizeY) - c2 .lt. ynozz - rnozz) .or. (yCoord(1) + c2 .gt. ynozz + rnozz)) cycle
          if ((zCoord(sizeZ) - c2 .lt. znozz - rnozz) .or. (zCoord(1) + c2 .gt. znozz + rnozz)) cycle
          delt = rnozz/dble(cnt)

          if ((ynozz .ge. yCoord(1) - rnozz) .and. (ynozz .le. yCoord(sizeY) + rnozz) .and. &
              (znozz .ge. zCoord(1) - rnozz) .and. (znozz .le. zCoord(sizeZ) + rnozz)) then

              call Grid_getBlkPtr(blockList(lb),solnData)
              do k = blkLimitsGC(LOW,KAXIS), blkLimitsGC(HIGH,KAXIS)
                 zz = zCoord(k)
                 if ((zz .lt. znozz - rnozz) .or. (zz .gt. znozz + rnozz)) cycle
                 do j = blkLimitsGC(LOW, JAXIS), blkLimitsGC(HIGH, JAXIS)
                    yy = yCoord(j)
                    if ((yy .lt. ynozz - rnozz) .or. (yy .gt. ynozz + rnozz)) cycle
                    do i = blkLimitsGC(LOW,IAXIS), blkLimitsGC(HIGH, IAXIS)
                       xx = xCoord(i)
                       if ((xx .lt. xnozz - c2) .or. (xx .gt. xnozz + c2)) cycle

                       yzdist = sqrt((yy-ynozz)**2 + (zz-znozz)**2)
                       if (yzdist .le. rnozz) then
                           changedGrid = .true.
                           ri = int(floor(yzdist/delt))
                           dr = yzdist/delt - ri
                           if (ri .ge. cnt - 1) then
                               new_mass = solnData(DENS_VAR,i,j,k) + rho(ri) + (rho_amb-rho(ri))*dr
                           else
                               new_mass = solnData(DENS_VAR,i,j,k) + rho(ri) + (rho(ri+1)-rho(ri))*dr
                           endif

                           solnData(VELX_VAR,i,j,k) = solnData(DENS_VAR,i,j,k)/new_mass * solnData(VELX_VAR,i,j,k)
                           solnData(VELY_VAR,i,j,k) = solnData(DENS_VAR,i,j,k)/new_mass * solnData(VELY_VAR,i,j,k)
                           solnData(VELZ_VAR,i,j,k) = solnData(DENS_VAR,i,j,k)/new_mass * solnData(VELZ_VAR,i,j,k)
                           solnData(DENS_VAR,i,j,k) = new_mass
                           solnData(TEMP_VAR,i,j,k) = t
                           solnData(SPECIES_BEGIN:SPECIES_END,i,j,k) = xn

                           !eosData(EOS_DENS) = solnData(DENS_VAR,i,j,k)
                           !eosData(EOS_TEMP) = solnData(TEMP_VAR,i,j,k)
                           !call Eos(MODE_DENS_TEMP,1,eosData,xn)
                           !solnData(PRES_VAR,i,j,k) = eosData(EOS_PRES)
                           !solnData(EINT_VAR,i,j,k) = eosData(EOS_EINT)
                           !solnData(ENER_VAR,i,j,k) = eosData(EOS_EINT)
                           !solnData(GAMC_VAR,i,j,k) = eosData(EOS_GAMC)
                           !solnData(GAME_VAR,i,j,k) = eosData(EOS_PRES)/(eosData(EOS_EINT)*eosData(EOS_DENS))+1
                       endif
                    enddo
                 enddo
              enddo
              call Grid_releaseBlkPtr(blockList(lb), solnData)
              if (changedGrid) then
                  call Eos_wrapped(MODE_DENS_TEMP,blkLimitsGC,blockList(lb))
              endif
          endif
          deallocate(xCoord)
          deallocate(yCoord)
          deallocate(zCoord)
      enddo
  endif

  call Stir(blockCount, blockList, dt) 
  call Flame_step(blockCount, blockList, dt)
  call Burn(blockCount, blockList, dt) 
  call Heat(blockCount, blockList, dt, dr_simTime) 
  call Cool(blockCount, blockList, dt, dr_simTime) 

  return
end subroutine Driver_sourceTerms
