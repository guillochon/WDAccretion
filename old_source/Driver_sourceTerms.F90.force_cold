!!****if* source/Driver/DriverMain/Driver_sourceTerms
!!
!! NAME
!!
!!  Driver_sourceTerms
!!
!! SYNOPSIS
!!
!!  Driver_sourceTerms(integer(IN)::blockCount,
!!                     integer(IN)::blockList(blockCount),
!!                     real(IN) :: dt)
!!
!! DESCRIPTION
!!
!!  Driver for source terms. Instead of calling all these routines 
!!  from Driver_evolveFlash we call Driver_sourceTerms which then
!!  makes the calls to Cool, Burn, Heat and Stir.  If a unit is not
!!  included in the simulation, the routine will be a stub and return
!!  without doing anything.
!! 
!!
!! ARGUMENTS
!!  blockCount   : The number of blocks in the list
!!  blockList    : The list of blocks on which to apply the stirring operator
!!  dt           : the current timestep
!!
!!***



subroutine Driver_sourceTerms(blockCount, blockList, dt) 

    use Driver_data, ONLY: dr_simTime
    use Flame_interface, ONLY : Flame_step
    use Stir_interface, ONLY : Stir
    use Heat_interface, ONLY : Heat
    use Burn_interface, ONLY : Burn
    use Cool_interface, ONLY : Cool
    use Grid_interface, ONLY : Grid_getBlkIndexLimits, Grid_getBlkPtr, Grid_releaseBlkPtr
    use Eos_interface, ONLY : Eos
    implicit none
#include "Eos.h"
#include "constants.h"
#include "Flash.h"

    real, intent(IN)    :: dt
    integer, intent(IN) :: blockCount
    integer, dimension(blockCount), intent(IN):: blockList

    integer  ::  i, j, k, lb

    integer,dimension(2,MDIM) :: blkLimits, blkLimitsGC
    real, dimension(:,:,:,:), pointer :: solnData
    real, dimension(NSPECIES) :: xn
    real, dimension(EOS_NUM) :: eosData
    real :: ke

    call Stir(blockCount, blockList, dt) 
    call Flame_step(blockCount, blockList, dt)
    call Burn(blockCount, blockList, dt) 
    call Heat(blockCount, blockList, dt, dr_simTime) 
    call Cool(blockCount, blockList, dt, dr_simTime) 

    if (dr_simTime .gt. 20.0) return

    do lb = 1, blockCount
        call Grid_getBlkIndexLimits(blockList(lb),blkLimits,blkLimitsGC)
        call Grid_getBlkPtr(blockList(lb),solnData)
        do k = blkLimitsGC(LOW, KAXIS), blkLimitsGC(HIGH, KAXIS)
            do j = blkLimitsGC(LOW, JAXIS), blkLimitsGC(HIGH, JAXIS)
                do i = blkLimitsGC(LOW, IAXIS), blkLimitsGC(HIGH, IAXIS)
                    if (solnData(DENS_VAR,i,j,k) .lt. 1.0e2) cycle
                    !eosData(EOS_DENS) = solnData(DENS_VAR,i,j,k)
                    !eosData(EOS_TEMP) = 5.0d5
                    !xn = solnData(SPECIES_BEGIN:SPECIES_END,i,j,k)

                    !call Eos(MODE_DENS_TEMP,1,eosData,xn)

                    solnData(VELX_VAR,i,j,k) = solnData(VELX_VAR,i,j,k)*sqrt(0.95)
                    solnData(VELY_VAR,i,j,k) = solnData(VELY_VAR,i,j,k)*sqrt(0.95)
                    solnData(VELZ_VAR,i,j,k) = solnData(VELZ_VAR,i,j,k)*sqrt(0.95)
                    !solnData(TEMP_VAR,i,j,k) = eosData(EOS_TEMP)
                    !solnData(PRES_VAR,i,j,k) = eosData(EOS_PRES)
                    !solnData(EINT_VAR,i,j,k) = eosData(EOS_EINT)
                    !solnData(GAMC_VAR,i,j,k) = eosData(EOS_GAMC)
                    !solnData(GAME_VAR,i,j,k) = eosData(EOS_PRES)/(eosData(EOS_EINT)*eosData(EOS_DENS))+1
                    ke = 0.5 * (solnData(VELX_VAR,i,j,k)**2. + solnData(VELY_VAR,i,j,k)**2. + solnData(VELZ_VAR,i,j,k)**2.)
                    solnData(ENER_VAR,i,j,k) = solnData(EINT_VAR,i,j,k) + ke

                    !xn(:) = solnData(SPECIES_BEGIN:SPECIES_END,i,j,k)
                    !eosData(EOS_TEMP) = 5.0e5
                    !eosData(EOS_DENS) = solnData(DENS_VAR,i,j,k)
                    !call Eos(MODE_DENS_TEMP,1,eosData,xn)
                    !solnData(TEMP_VAR,i,j,k) = eosData(EOS_TEMP)
                    !solnData(PRES_VAR,i,j,k) = eosData(EOS_PRES)
                    !solnData(EINT_VAR,i,j,k) = eosData(EOS_EINT)
                    !solnData(ENER_VAR,i,j,k) = eosData(EOS_EINT) + 0.5 * &
                    !    (solnData(VELX_VAR,i,j,k)**2. + &
                    !     solnData(VELY_VAR,i,j,k)**2. + &
                    !     solnData(VELZ_VAR,i,j,k)**2.)
                enddo
            enddo
        enddo
        call Grid_releaseBlkPtr(blockList(lb), solnData)
    enddo

    return
end subroutine Driver_sourceTerms
